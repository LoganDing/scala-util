package io.wasted.util.test

import io.wasted.util._

import org.specs2.mutable._

class PooledResourceSpec extends Specification {

  "Specification for PooledResource.".title

  case class TestMeHard(msg: String)

  val objDefault = TestMeHard("Default String")
  val objOurs = TestMeHard("Our String")
  val pool = new PooledResource(() => objDefault, 10, 5)

  // Give the pool time to warm up
  Thread.sleep(50)

  "Operating on the Pool" should {
    "successfully offering our object #1" in {
      pool.release(objOurs) must_== ()
    }
    "successfully offering our object #2" in {
      pool.release(objOurs) must_== ()
    }
    "successfully offering our object #3" in {
      pool.release(objOurs) must_== ()
    }
    "get an object that was generated by us #1" in {
      pool.get() must_== Some(objOurs)
    }
    "get an object that was generated by us #2" in {
      pool.get() must_== Some(objOurs)
    }
    "get an object that was generated by us #3" in {
      pool.get() must_== Some(objOurs)
    }
    "get the default object which gets generated by default" in {
      pool.get() must_== Some(objDefault)
    }
  }

}

